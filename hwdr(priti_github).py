# -*- coding: utf-8 -*-
"""Handwritten Digit Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_sPrlp3Q19W5eqgi5gY8eNBPPLN01JPh
"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

# Load MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values to be between 0 and 1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Reshape to include channel dimension (grayscale images with 1 channel)
x_train = np.expand_dims(x_train, axis=-1)
x_test = np.expand_dims(x_test, axis=-1)

# Build the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPool2D((2, 2)),
    tf.keras.layers.Conv2D(48, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D((2, 2)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(500, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10)

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Loss: {loss}")
print(f"Accuracy: {accuracy}")

# Handwritten digit prediction
image_number = 1
while os.path.isfile(f"digit{image_number}.png"):
    try:
        img = cv2.imread(f"digit{image_number}.png", cv2.IMREAD_GRAYSCALE)
        if img is None:
            raise ValueError(f"Image digit{image_number}.png could not be read.")

        img = cv2.resize(img, (28, 28))  # Resize to 28x28 if necessary
        img = np.expand_dims(img, axis=-1)  # Add channel dimension
        img = img.astype('float32') / 255.0  # Normalize
        img = np.expand_dims(img, axis=0)  # Add batch dimension

        prediction = model.predict(img)
        digit = np.argmax(prediction)
        print(f"This digit is probably a {digit}")

        plt.imshow(img[0, :, :, 0], cmap=plt.cm.binary)
        plt.show()

        image_number += 1
    except Exception as e:
        print(f"Error: {e}")
        break

"""performance (in terms of accuracy) is enhanced when the images are of black background and the numbers are white
speed is enhanced with callbacks and datasets
"""